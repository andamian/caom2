<!--
************************************************************************
*******************  CANADIAN ASTRONOMY DATA CENTRE  *******************
**************  CENTRE CANADIEN DE DONNÉES ASTRONOMIQUES  **************
*
*  (c) 2009.                            (c) 2009.
*  Government of Canada                 Gouvernement du Canada
*  National Research Council            Conseil national de recherches
*  Ottawa, Canada, K1A 0R6              Ottawa, Canada, K1A 0R6
*  All rights reserved                  Tous droits réservés
*                                       
*  NRC disclaims any warranties,        Le CNRC dénie toute garantie
*  expressed, implied, or               énoncée, implicite ou légale,
*  statutory, of any kind with          de quelque nature que ce
*  respect to the software,             soit, concernant le logiciel,
*  including without limitation         y compris sans restriction
*  any warranty of merchantability      toute garantie de valeur
*  or fitness for a particular          marchande ou de pertinence
*  purpose. NRC shall not be            pour un usage particulier.
*  liable in any event for any          Le CNRC ne pourra en aucun cas
*  damages, whether direct or           être tenu responsable de tout
*  indirect, special or general,        dommage, direct ou indirect,
*  consequential or incidental,         particulier ou général,
*  arising from the use of the          accessoire ou fortuit, résultant
*  software.  Neither the name          de l'utilisation du logiciel. Ni
*  of the National Research             le nom du Conseil National de
*  Council of Canada nor the            Recherches du Canada ni les noms
*  names of its contributors may        de ses  participants ne peuvent
*  be used to endorse or promote        être utilisés pour approuver ou
*  products derived from this           promouvoir les produits dérivés
*  software without specific prior      de ce logiciel sans autorisation
*  written permission.                  préalable et particulière
*                                       par écrit.
*                                       
*  This file is part of the             Ce fichier fait partie du projet
*  OpenCADC project.                    OpenCADC.
*                                       
*  OpenCADC is free software:           OpenCADC est un logiciel libre ;
*  you can redistribute it and/or       vous pouvez le redistribuer ou le
*  modify it under the terms of         modifier suivant les termes de
*  the GNU Affero General Public        la “GNU Affero General Public
*  License as published by the          License” telle que publiée
*  Free Software Foundation,            par la Free Software Foundation
*  either version 3 of the              : soit la version 3 de cette
*  License, or (at your option)         licence, soit (à votre gré)
*  any later version.                   toute version ultérieure.
*                                       
*  OpenCADC is distributed in the       OpenCADC est distribué
*  hope that it will be useful,         dans l’espoir qu’il vous
*  but WITHOUT ANY WARRANTY;            sera utile, mais SANS AUCUNE
*  without even the implied             GARANTIE : sans même la garantie
*  warranty of MERCHANTABILITY          implicite de COMMERCIALISABILITÉ
*  or FITNESS FOR A PARTICULAR          ni d’ADÉQUATION À UN OBJECTIF
*  PURPOSE.  See the GNU Affero         PARTICULIER. Consultez la Licence
*  General Public License for           Générale Publique GNU Affero
*  more details.                        pour plus de détails.
*                                       
*  You should have received             Vous devriez avoir reçu une
*  a copy of the GNU Affero             copie de la Licence Générale
*  General Public License along         Publique GNU Affero avec
*  with OpenCADC.  If not, see          OpenCADC ; si ce n’est
*  <http://www.gnu.org/licenses/>.      pas le cas, consultez :
*                                       <http://www.gnu.org/licenses/>.
*
*  $Revision: 4 $
*
************************************************************************
-->

<project default="build" basedir=".">
    <property environment="env"/>
    <property file="local.build.properties" />

    <!-- site-specific build properties or overrides of values in opencadc.properties -->
    <property file="${env.CADC_PREFIX}/etc/local.properties" />

    <!-- site-specific targets, e.g. install, cannot duplicate those in opencadc.targets.xml -->
    <import file="${env.CADC_PREFIX}/etc/local.targets.xml" optional="true" />

    <!-- default properties and targets -->
    <property file="${env.CADC_PREFIX}/etc/caom.properties" />
    <import file="${env.CADC_PREFIX}/etc/caom.targets.xml"/>

    <!-- developer convenience: place for extra targets and properties -->
    <import file="extras.xml" optional="true" />
    
    <property name="project"            value="fits2caom2" />

    <property name="cadcRegistryClient" value="${lib}/cadcRegistryClient.jar" />
    <property name="cadcUtil"           value="${lib}/cadcUtil.jar" />
    <property name="cadcVOSClient"      value="${lib}/cadcVOSClient.jar" />
    <property name="cadcUWS"            value="${lib}/cadcUWS.jar" />
    <property name="cadcWCS"            value="${lib}/cadcWCS.jar" />
    
    <property name="caom2"              value="${lib}/caom2.jar" />

    <property name="fits"               value="${ext.lib}/fits.jar" />
    <property name="jdom2"              value="${ext.lib}/jdom2.jar" />
    <property name="log4j"              value="${ext.lib}/log4j.jar" />
    <property name="xerces"             value="${ext.lib}/xerces.jar" />
    
    <property name="jars"   value="${cadcRegistryClient}:${cadcUtil}:${cadcVOSClient}:${cadcWCS}:${caom2}:${fits}:${jdom2}:${log4j}" />

    <property name="client.cadc.jars"      value="${cadcRegistryClient}:${cadcUtil}:${cadcVOSClient}:${cadcUWS}:${cadcWCS}:${caom2}" />
    <property name="client.external.jars"  value="${fits}:${jdom2}:${log4j}:${xerces}" />
    
    <target name="config">
        <copy file="config/fits2caom2.config" todir="build/class"/>
    </target>
    
    <target name="build" depends="compile,config,manifest">
        <jar jarfile="${build}/lib/${project}.jar"
            basedir="${build}/class" update="no"
            manifest="${build}/tmp/${project}.mf">
            <include name="ca/nrc/cadc/**" />
            <include name="**.xsd" />
            <include name="**.config" />
        </jar>
    </target>
	
    <target name="manifest">
        <pathconvert property="client.flat.manifest" pathsep=" ">
            <mapper type="flatten"/>
            <path> <pathelement path="${client.cadc.jars}"/> </path>
            <path> <pathelement path="${client.external.jars}"/> </path>
        </pathconvert>
        <pathconvert property="client.non-flat.manifest" pathsep=" ">
            <path> <pathelement path="${client.external.jars}"/> </path>
        </pathconvert>

        <manifest file="${build}/tmp/${project}.mf" mode="replace">
            <attribute name="Main-Class" value="ca.nrc.cadc.fits2caom2.Main"/>
            <attribute name="Class-Path" value="${client.flat.manifest} ${client.non-flat.manifest}"/>
        </manifest>
    </target>
    
    <!-- create the client distribution tar file -->
    <target name="distribute" depends="build" >
        <echo message="${ant.project.name}"/>
        <antcall target="build_distribution">
            <param name="jarFiles" value="${build}/lib/${project}.jar:${client.cadc.jars}:${client.external.jars}"/>
            <param name="scriptFiles" value="scripts/fits2caom2"/>
            <param name="distName" value="fits2caom2"/> 
        </antcall>
    </target>
    
    <!-- JAR files needed to run the test suite -->
    <property name="junit"          value="${ext.dev}/junit.jar" />
    
    <property name="testingJars"    value="${junit}:${xerces}" />
    
    <target name="setup-test">
        <copy overwrite="true" file="${env.CADC_PREFIX}/etc/proxy.pem" tofile="${build}/test/class/proxy.pem" />
    </target>

    <target name="test-app" depends="build, config, compile-test">
        <junit printsummary="yes" haltonfailure="yes" fork="yes">
            <classpath>
                <pathelement path="build/test/class" />
                <pathelement path="build/class" />
                <pathelement path="${client.cadc.jars}:${client.external.jars}:${testingJars}" />
            </classpath>
            <formatter type="plain" usefile="false" />

            <test name="ca.nrc.cadc.fits2caom2.MainTest"/>
            <test name="ca.nrc.cadc.fits2caom2.IngestTest"/>
        </junit>
    </target>
    
    <target name="test-lib" depends="build, config, compile-test">
        <junit printsummary="yes" haltonfailure="yes" fork="yes">
            <classpath>
                <pathelement path="build/test/class" />
                <pathelement path="build/class" />
                <pathelement path="${client.cadc.jars}:${client.external.jars}:${testingJars}" />
            </classpath>
            <formatter type="plain" usefile="false" />

            <test name="ca.nrc.cadc.caom2.fits.ConfigMapTest"/>
            <test name="ca.nrc.cadc.caom2.fits.FitsMappingTest"/>
            <test name="ca.nrc.cadc.caom2.fits.FitsMapperTest"/>
            <test name="ca.nrc.cadc.caom2.fits.CastTest"/>
            <test name="ca.nrc.cadc.caom2.fits.FitsFileTest"/>
            <test name="ca.nrc.cadc.caom2.fits.CtypesTest"/>
            <test name="ca.nrc.cadc.caom2.fits.wcs.WcsTest"/>
            <test name="ca.nrc.cadc.caom2.fits.wcs.PositionTest"/>
            <test name="ca.nrc.cadc.caom2.fits.wcs.EnergyTest"/>
            <test name="ca.nrc.cadc.caom2.fits.wcs.TimeTest"/>
            <test name="ca.nrc.cadc.caom2.fits.wcs.PolarizationTest"/>
            <test name="ca.nrc.cadc.ad.AdSchemeHandlerTest" />
            <test name="ca.nrc.cadc.caom2.fits.wcs.ObservableTest" />
        </junit>
    </target>

    <target name="int-test" depends="config, compile-test">
        <junit printsummary="yes" haltonfailure="yes" fork="yes">
            <classpath>
                <pathelement path="build/test/class" />
                <pathelement path="build/class" />
                <pathelement path="${jars}:${testingJars}" />
            </classpath>
            <formatter type="plain" usefile="false" />
            
            <!-- assumption: a suitable proxy cert in build/test/class/proxy.pem -->

            <test name="ca.nrc.cadc.fits2caom2.integration.IncludedConfigOnlyTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.MetaDataTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.SimpleFitsTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.MultiExtensionFitsTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.DumpConfigTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.IngestableFileIntTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.VOSUriTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.ImageFileTest"/>
            <test name="ca.nrc.cadc.fits2caom2.integration.GZFileTest"/>
        </junit>
    </target>

</project>
